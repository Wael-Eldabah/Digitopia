from pathlib import Path
path = Path(r"c:\\Users\\WaelAshrafIGRCSQUARE\\Desktop\\EyeGuard\\eyeguard\\frontend\\src\\pages\\Dashboard.jsx")
text = path.read_text()
marker = "const fetchDevices = async () => {\r\n  const response = await axios.get('/api/v1/devices');\r\n  return response.data;\r\n};\r\n\r\n"
helper = marker + "const toNumeric = (value, fallback = 0) => {\r\n  if (typeof value === 'number' && Number.isFinite(value)) {\r\n    return value;\r\n  }\r\n  const parsed = Number(value);\r\n  return Number.isFinite(parsed) ? parsed : fallback;\r\n};\r\n\r\n"
if helper in text:
    pass
elif marker in text:
    text = text.replace(marker, helper)
else:
    raise SystemExit('fetchDevices marker not found')
old_metrics = "  const metrics = useMemo(() => {\r\n    if (!devices.length) {\r\n      return {\r\n        total: 0,\r\n        blocked: 0,\r\n        online: 0,\r\n        traffic: 0,\r\n      };\r\n    }\r\n    const traffic = devices.reduce((sum, device) => sum + (device.traffic_gb || 0), 0);\r\n    return {\r\n      total: devices.length,\r\n      blocked: devices.filter((device) => device.status === 'blocked').length,\r\n      online: devices.filter((device) => device.status === 'online').length,\r\n      traffic,\r\n    };\r\n  }, [devices]);\r\n"
new_metrics = "  const metrics = useMemo(() => {\r\n    if (!devices.length) {\r\n      return {\r\n        total: 0,\r\n        blocked: 0,\r\n        online: 0,\r\n        traffic: 0,\r\n      };\r\n    }\r\n    const traffic = devices.reduce((sum, device) => sum + toNumeric(device.traffic_gb), 0);\r\n    return {\r\n      total: devices.length,\r\n      blocked: devices.filter((device) => device.status === 'blocked').length,\r\n      online: devices.filter((device) => device.status === 'online').length,\r\n      traffic,\r\n    };\r\n  }, [devices]);\r\n"
if old_metrics in text:
    text = text.replace(old_metrics, new_metrics)
elif new_metrics not in text:
    raise SystemExit('metrics block not found')
old_list = "              {devices.map((device) => {\r\n                const trendingUp = (device.traffic_delta ?? 0) >= 0;\r\n                const delta = Math.abs(device.traffic_delta ?? 0).toFixed(2);\r\n                const deltaSign = trendingUp ? '+' : '-';\r\n                const directionLabel = trendingUp ? 'UP' : 'DOWN';\r\n                const color = trendingUp ? 'text-emerald-300' : 'text-amber-300';\r\n                return (\r\n                  <li key={device.id} className=\"flex flex-col gap-3 bg-slate-900/60 border border-slate-800/60 rounded-2xl px-4 py-3 sm:flex-row sm:items-center sm:justify-between\">\r\n                    <div>\r\n                      <p className=\"text-sm font-semibold text-slate-100\">{device.hostname}</p>\r\n                      <p className=\"text-xs text-slate-500 font-mono\">{device.ip_address}</p>\r\n                    </div>\r\n                    <div className=\"text-left sm:text-right\">\r\n                      <p className=\"text-xs text-slate-500 uppercase\">Traffic</p>\r\n                      <p className={`text-sm font-semibold ${color}`}>\r\n                        {device.traffic_gb.toFixed(2)} GB\r\n                        <span className=\"ml-2 text-xs text-slate-400\">{directionLabel} {deltaSign}{delta}</span>\r\n                      </p>\r\n                    </div>\r\n                  </li>\r\n                );\r\n              })}\r\n"
new_list = "              {devices.map((device, index) => {\r\n                const trafficValue = toNumeric(device.traffic_gb);\r\n                const deltaValue = toNumeric(device.traffic_delta);\r\n                const trendingUp = deltaValue >= 0;\r\n                const delta = Math.abs(deltaValue).toFixed(2);\r\n                const deltaSign = trendingUp ? '+' : '-';\r\n                const directionLabel = trendingUp ? 'UP' : 'DOWN';\r\n                const color = trendingUp ? 'text-emerald-300' : 'text-amber-300';\r\n                const hostname = typeof device.hostname === 'string' && device.hostname.trim() ? device.hostname : 'Unknown Device';\r\n                const ipAddress = typeof device.ip_address === 'string' && device.ip_address.trim() ? device.ip_address : 'N/A';\r\n                const listKey = device.id || device.ip_address || index;\r\n                return (\r\n                  <li key={listKey} className=\"flex flex-col gap-3 bg-slate-900/60 border border-slate-800/60 rounded-2xl px-4 py-3 sm:flex-row sm:items-center sm:justify-between\">\r\n                    <div>\r\n                      <p className=\"text-sm font-semibold text-slate-100\">{hostname}</p>\r\n                      <p className=\"text-xs text-slate-500 font-mono\">{ipAddress}</p>\r\n                    </div>\r\n                    <div className=\"text-left sm:text-right\">\r\n                      <p className=\"text-xs text-slate-500 uppercase\">Traffic</p>\r\n                      <p className={`text-sm font-semibold ${color}`}>\r\n                        {trafficValue.toFixed(2)} GB\r\n                        <span className=\"ml-2 text-xs text-slate-400\">{directionLabel} {deltaSign}{delta}</span>\r\n                      </p>\r\n                    </div>\r\n                  </li>\r\n                );\r\n              })}\r\n"
if old_list in text:
    text = text.replace(old_list, new_list)
elif new_list not in text:
    raise SystemExit('device list block not found')
path.write_text(text)
